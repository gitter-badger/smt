#!/usr/bin/python2

mach_conf = """
# data
train-data = %(train_data)s

# global training parameters

# learning rate scheme lr5a
lrate = Decay beg=0.01 mult=5e-8 min=1e-4 maxiter=5
weight-decay = 3e-5
block-size = %(block_size)s
curr-iter = 0
last-iter = %(last_iter)s

# network architecture

mach = %%CONF

# init scheme i0
random-init-project = 0.0

DIM1 = %(DIM_START)s	# src vocab
DIM2 = 32		# embedding size
DIM3 = 1024		# cumulated embedding DIM1 x DIM2
DIM5 = 1536		# phrase embedding
DIM8 = 768		# decoder hidden 1
DIM9 = %(DIM_END)s	# decoder short list (len(target wlist) + 1 (EOS))

[machine]
   Sequential =
     #----- Encoder
     Parallel =
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
      Tab = DIM1 x DIM2
     #End
     #----- phrase embedding
     Tanh = DIM3 x DIM5			fanio-init-weights=0.06 random-init-bias=0.0
     #----- Decoder
     Split =
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
       Sequential =
         Tanh = DIM5 x DIM8		fanio-init-weights=1.0 random-init-bias=0.0
         SoftmaxStable = DIM8 x DIM9		fanio-init-weights=1.0 random-init-bias=0.0
       #End
     #End
   #End
"""

data = """
DataDescr 1 
# This is the data description file for the training data
# For efficiecy reasons, it is always good to load all the data into memory
# Shuffling after each iteration is usually good to get better convergence
#   
Preload
ResamplMode 1
ResamplSeed 12345678
ShuffleMode 10
#   
# We list all the data files 
#   <file> <resmpl_coeff> <order> <mode>
#   where mode is binary or of: 1=IGN_BOS 2=IGN_UNK 4=IGN_UNK_ALL, 8=IGN_EOS
PathPrefix 	%(path_prefix)s
WordListSource 	%(wl_source)s
WordListTarget	%(wl_target)s			with_eos
DataPhraseBin 	%(data_phrase_bin)s 		1.0 32 32
"""

import sys

import subprocess

def file_len(fname):
    p = subprocess.Popen(['wc', '-l', fname], stdout=subprocess.PIPE, 
                                              stderr=subprocess.PIPE)
    result, err = p.communicate()
    if p.returncode != 0:
        raise IOError(err)
    return int(result.strip().split()[0])

if __name__ == "__main__":

	train_df = "train.df"

	# data: path_prefix, wl_source, wl_target, data_phrase_bin
	data_dict = {
			"path_prefix" 		: ".",
			"data_phrase_bin"	: sys.argv[1],
			"wl_source" 		: sys.argv[2],
			"wl_target" 		: sys.argv[3],
	}
			
	with open(train_df, "wb") as f:
		f.write(data % data_dict)

	mach_dict = {
			"train_data" 		: train_df,
			"block_size" 		: 128,
			"last_iter" 		: 10,
			"DIM_START" 		: file_len(data_dict["wl_source"]),
			"DIM_END" 		: file_len(data_dict["wl_target"]) + 1,
	}

	with open("mach.conf", "wb") as f:
		f.write(mach_conf % mach_dict)


